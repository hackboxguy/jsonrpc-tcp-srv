#define _LINUX_ 1
#ifdef _LINUX_
#include <fcntl.h>
#include <linux/i2c-dev.h>
#include <math.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <unistd.h>
#define PROGMEM
#define false 0
#define true 1
#define memcpy_P memcpy
#else
#include <Arduino.h>
#ifdef __AVR__
#include <avr/pgmspace.h>
#endif
#ifndef __AVR_ATtiny85__
#include <SPI.h>
#endif
#endif
#include "ss_oled.h"
const uint8_t ucFont[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x5f, 0x5f,
    0x06, 0x00, 0x00, 0x07, 0x07, 0x00, 0x07, 0x07, 0x00, 0x14, 0x7f, 0x7f,
    0x14, 0x7f, 0x7f, 0x14, 0x24, 0x2e, 0x2a, 0x6b, 0x6b, 0x3a, 0x12, 0x46,
    0x66, 0x30, 0x18, 0x0c, 0x66, 0x62, 0x30, 0x7a, 0x4f, 0x5d, 0x37, 0x7a,
    0x48, 0x00, 0x04, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x3e, 0x63,
    0x41, 0x00, 0x00, 0x00, 0x41, 0x63, 0x3e, 0x1c, 0x00, 0x00, 0x08, 0x2a,
    0x3e, 0x1c, 0x3e, 0x2a, 0x08, 0x00, 0x08, 0x08, 0x3e, 0x3e, 0x08, 0x08,
    0x00, 0x00, 0x80, 0xe0, 0x60, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08,
    0x08, 0x08, 0x00, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x60, 0x30, 0x18,
    0x0c, 0x06, 0x03, 0x01, 0x3e, 0x7f, 0x59, 0x4d, 0x47, 0x7f, 0x3e, 0x40,
    0x42, 0x7f, 0x7f, 0x40, 0x40, 0x00, 0x62, 0x73, 0x59, 0x49, 0x6f, 0x66,
    0x00, 0x22, 0x63, 0x49, 0x49, 0x7f, 0x36, 0x00, 0x18, 0x1c, 0x16, 0x53,
    0x7f, 0x7f, 0x50, 0x27, 0x67, 0x45, 0x45, 0x7d, 0x39, 0x00, 0x3c, 0x7e,
    0x4b, 0x49, 0x79, 0x30, 0x00, 0x03, 0x03, 0x71, 0x79, 0x0f, 0x07, 0x00,
    0x36, 0x7f, 0x49, 0x49, 0x7f, 0x36, 0x00, 0x06, 0x4f, 0x49, 0x69, 0x3f,
    0x1e, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x80,
    0xe6, 0x66, 0x00, 0x00, 0x08, 0x1c, 0x36, 0x63, 0x41, 0x00, 0x00, 0x00,
    0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 0x41, 0x63, 0x36, 0x1c, 0x08,
    0x00, 0x00, 0x02, 0x03, 0x59, 0x5d, 0x07, 0x02, 0x3e, 0x7f, 0x41, 0x5d,
    0x5d, 0x5f, 0x0e, 0x7c, 0x7e, 0x13, 0x13, 0x7e, 0x7c, 0x00, 0x41, 0x7f,
    0x7f, 0x49, 0x49, 0x7f, 0x36, 0x1c, 0x3e, 0x63, 0x41, 0x41, 0x63, 0x22,
    0x41, 0x7f, 0x7f, 0x41, 0x63, 0x3e, 0x1c, 0x41, 0x7f, 0x7f, 0x49, 0x5d,
    0x41, 0x63, 0x41, 0x7f, 0x7f, 0x49, 0x1d, 0x01, 0x03, 0x1c, 0x3e, 0x63,
    0x41, 0x51, 0x33, 0x72, 0x7f, 0x7f, 0x08, 0x08, 0x7f, 0x7f, 0x00, 0x00,
    0x41, 0x7f, 0x7f, 0x41, 0x00, 0x00, 0x30, 0x70, 0x40, 0x41, 0x7f, 0x3f,
    0x01, 0x41, 0x7f, 0x7f, 0x08, 0x1c, 0x77, 0x63, 0x41, 0x7f, 0x7f, 0x41,
    0x40, 0x60, 0x70, 0x7f, 0x7f, 0x0e, 0x1c, 0x0e, 0x7f, 0x7f, 0x7f, 0x7f,
    0x06, 0x0c, 0x18, 0x7f, 0x7f, 0x1c, 0x3e, 0x63, 0x41, 0x63, 0x3e, 0x1c,
    0x41, 0x7f, 0x7f, 0x49, 0x09, 0x0f, 0x06, 0x1e, 0x3f, 0x21, 0x31, 0x61,
    0x7f, 0x5e, 0x41, 0x7f, 0x7f, 0x09, 0x19, 0x7f, 0x66, 0x26, 0x6f, 0x4d,
    0x49, 0x59, 0x73, 0x32, 0x03, 0x41, 0x7f, 0x7f, 0x41, 0x03, 0x00, 0x7f,
    0x7f, 0x40, 0x40, 0x7f, 0x7f, 0x00, 0x1f, 0x3f, 0x60, 0x60, 0x3f, 0x1f,
    0x00, 0x3f, 0x7f, 0x60, 0x30, 0x60, 0x7f, 0x3f, 0x63, 0x77, 0x1c, 0x08,
    0x1c, 0x77, 0x63, 0x07, 0x4f, 0x78, 0x78, 0x4f, 0x07, 0x00, 0x47, 0x63,
    0x71, 0x59, 0x4d, 0x67, 0x73, 0x00, 0x7f, 0x7f, 0x41, 0x41, 0x00, 0x00,
    0x01, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x41, 0x41, 0x7f, 0x7f,
    0x00, 0x00, 0x08, 0x0c, 0x06, 0x03, 0x06, 0x0c, 0x08, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x03, 0x07, 0x04, 0x00, 0x00, 0x20,
    0x74, 0x54, 0x54, 0x3c, 0x78, 0x40, 0x41, 0x7f, 0x3f, 0x48, 0x48, 0x78,
    0x30, 0x38, 0x7c, 0x44, 0x44, 0x6c, 0x28, 0x00, 0x30, 0x78, 0x48, 0x49,
    0x3f, 0x7f, 0x40, 0x38, 0x7c, 0x54, 0x54, 0x5c, 0x18, 0x00, 0x48, 0x7e,
    0x7f, 0x49, 0x03, 0x06, 0x00, 0x98, 0xbc, 0xa4, 0xa4, 0xf8, 0x7c, 0x04,
    0x41, 0x7f, 0x7f, 0x08, 0x04, 0x7c, 0x78, 0x00, 0x44, 0x7d, 0x7d, 0x40,
    0x00, 0x00, 0x60, 0xe0, 0x80, 0x84, 0xfd, 0x7d, 0x00, 0x41, 0x7f, 0x7f,
    0x10, 0x38, 0x6c, 0x44, 0x00, 0x41, 0x7f, 0x7f, 0x40, 0x00, 0x00, 0x7c,
    0x7c, 0x18, 0x78, 0x1c, 0x7c, 0x78, 0x7c, 0x78, 0x04, 0x04, 0x7c, 0x78,
    0x00, 0x38, 0x7c, 0x44, 0x44, 0x7c, 0x38, 0x00, 0x84, 0xfc, 0xf8, 0xa4,
    0x24, 0x3c, 0x18, 0x18, 0x3c, 0x24, 0xa4, 0xf8, 0xfc, 0x84, 0x44, 0x7c,
    0x78, 0x4c, 0x04, 0x0c, 0x18, 0x48, 0x5c, 0x54, 0x74, 0x64, 0x24, 0x00,
    0x04, 0x04, 0x3e, 0x7f, 0x44, 0x24, 0x00, 0x3c, 0x7c, 0x40, 0x40, 0x3c,
    0x7c, 0x40, 0x1c, 0x3c, 0x60, 0x60, 0x3c, 0x1c, 0x00, 0x3c, 0x7c, 0x60,
    0x30, 0x60, 0x7c, 0x3c, 0x44, 0x6c, 0x38, 0x10, 0x38, 0x6c, 0x44, 0x9c,
    0xbc, 0xa0, 0xa0, 0xfc, 0x7c, 0x00, 0x4c, 0x64, 0x74, 0x5c, 0x4c, 0x64,
    0x00, 0x08, 0x08, 0x3e, 0x77, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00, 0x77,
    0x77, 0x00, 0x00, 0x41, 0x41, 0x77, 0x3e, 0x08, 0x08, 0x00, 0x02, 0x03,
    0x01, 0x03, 0x02, 0x03, 0x01, 0x70, 0x78, 0x4c, 0x46, 0x4c, 0x78, 0x70};
#ifndef __AVR__
const uint8_t ucBigFont[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0xff, 0xff,
    0xff, 0xff, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3f, 0x3f, 0x3f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f,
    0x3f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x3f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc0, 0xc0, 0xfc, 0xfc, 0xfc, 0xfc, 0xc0, 0xc0, 0xfc, 0xfc, 0xfc, 0xfc,
    0xc0, 0xc0, 0x00, 0x00, 0xc0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xc0,
    0xff, 0xff, 0xff, 0xff, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f,
    0x0f, 0x0f, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0,
    0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0xff, 0xff,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x0f, 0x0f, 0x3c, 0x3c, 0x00, 0x00,
    0xf0, 0xf0, 0xc3, 0xc3, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xff, 0xff,
    0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x3f, 0x3f,
    0x3f, 0x3f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xf0, 0xf0, 0x00, 0x00,
    0x00, 0x00, 0xc0, 0xc0, 0xf0, 0xf0, 0x3c, 0x3c, 0x0f, 0x0f, 0x03, 0x03,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3c, 0x3c, 0xff, 0xff, 0xc3, 0xc3, 0xff, 0xff, 0x3c, 0x3c,
    0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0xff, 0xff, 0x03, 0x03, 0x0f, 0x0f,
    0xfc, 0xfc, 0xff, 0xff, 0x03, 0x03, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f,
    0x0c, 0x0c, 0x0c, 0x0c, 0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30,
    0x3f, 0x3f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xf0, 0xf0, 0xfc, 0xfc, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03,
    0x0f, 0x0f, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0xfc, 0xfc, 0xf0, 0xf0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00,
    0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x0c, 0x0c, 0xcc, 0xcc,
    0xff, 0xff, 0x3f, 0x3f, 0x3f, 0x3f, 0xff, 0xff, 0xcc, 0xcc, 0x0c, 0x0c,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0c, 0x0c, 0x0c, 0x0c, 0xff, 0xff, 0xff, 0xff, 0x0c, 0x0c,
    0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0,
    0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x30, 0x30, 0x3f, 0x3f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x0c, 0x0c,
    0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f,
    0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0,
    0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xf0, 0xf0, 0x3c, 0x3c,
    0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x03, 0x03,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0xff, 0xff, 0x03, 0x03, 0x03, 0x03,
    0xc3, 0xc3, 0xff, 0xff, 0xfc, 0xfc, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    0x30, 0x30, 0x0f, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
    0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f,
    0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30,
    0x3c, 0x3c, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x03, 0x03, 0xc3, 0xc3, 0xff, 0xff,
    0x3c, 0x3c, 0x00, 0x00, 0xc0, 0xc0, 0xf0, 0xf0, 0x3c, 0x3c, 0x0f, 0x0f,
    0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0xff, 0xff, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xff, 0xff, 0xfc, 0xfc, 0x00, 0x00,
    0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f,
    0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0,
    0xf0, 0xf0, 0x3c, 0x3c, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0xff, 0xff, 0xff, 0xff,
    0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x0f, 0x0f, 0xff, 0xff, 0xfc, 0xfc, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f,
    0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xfc, 0xfc, 0x0f, 0x0f, 0x03, 0x03,
    0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xff, 0xff, 0xfc, 0xfc, 0x00, 0x00,
    0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f,
    0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xfc, 0xfc, 0x0f, 0x0f, 0x03, 0x03,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xfc, 0xfc, 0xff, 0xff, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xff, 0xff,
    0xfc, 0xfc, 0x00, 0x00, 0xfc, 0xfc, 0xff, 0xff, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0xff, 0xff, 0xfc, 0xfc, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f,
    0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0xff, 0xff, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0xff, 0xff, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
    0x00, 0x00, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03,
    0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0,
    0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0,
    0xf0, 0xf0, 0x3c, 0x3c, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c,
    0x3f, 0x3f, 0xf3, 0xf3, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f,
    0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3,
    0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0c, 0x0c, 0x3c, 0x3c, 0xf0, 0xf0, 0xc0, 0xc0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0,
    0xf3, 0xf3, 0x3f, 0x3f, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c,
    0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3c, 0x3c, 0x3f, 0x3f, 0x03, 0x03, 0x03, 0x03,
    0xc3, 0xc3, 0xff, 0xff, 0x3c, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3f, 0x3f, 0x3f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xfc, 0xfc,
    0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xfc, 0xfc, 0xf0, 0xf0, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x3f, 0x3f, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c,
    0x0c, 0x0c, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc0, 0xc0, 0xf0, 0xf0, 0x3c, 0x3c, 0x0f, 0x0f, 0x3c, 0x3c, 0xf0, 0xf0,
    0xc0, 0xc0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x0c, 0x0c, 0x0c, 0x0c,
    0x0c, 0x0c, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0xff, 0xff, 0xff, 0xff, 0x03, 0x03,
    0x03, 0x03, 0xff, 0xff, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
    0xff, 0xff, 0x03, 0x03, 0x03, 0x03, 0xff, 0xff, 0xfc, 0xfc, 0x00, 0x00,
    0x0c, 0x0c, 0x0f, 0x0f, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f,
    0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xfc, 0xfc,
    0x0f, 0x0f, 0x03, 0x03, 0x03, 0x03, 0x0f, 0x0f, 0x3c, 0x3c, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c,
    0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x03, 0xff, 0xff, 0xff, 0xff, 0x03, 0x03, 0x0f, 0x0f, 0xfc, 0xfc,
    0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0c, 0x0c, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0xff, 0xff, 0xff, 0xff, 0x03, 0x03,
    0xc3, 0xc3, 0x0f, 0x0f, 0x3f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
    0xff, 0xff, 0x03, 0x03, 0x0f, 0x0f, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00,
    0x0c, 0x0c, 0x0f, 0x0f, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f,
    0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0xff, 0xff,
    0xff, 0xff, 0x03, 0x03, 0xc3, 0xc3, 0x0f, 0x0f, 0x3f, 0x3f, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x03, 0x03, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x0f, 0x0f, 0x0f, 0x0f, 0x0c, 0x0c,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xf0, 0xf0, 0xfc, 0xfc, 0x0f, 0x0f, 0x03, 0x03, 0x03, 0x03, 0x0f, 0x0f,
    0x3c, 0x3c, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0c, 0x0c,
    0x0c, 0x0c, 0xfc, 0xfc, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03,
    0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x03, 0x03, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
    0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f,
    0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x03, 0xff, 0xff, 0xff, 0xff, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0xff, 0xff, 0xff, 0xff,
    0x03, 0x03, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f,
    0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
    0xf0, 0xf0, 0xff, 0xff, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
    0xff, 0xff, 0x0f, 0x0f, 0x3f, 0x3f, 0xf0, 0xf0, 0xc0, 0xc0, 0x00, 0x00,
    0x0c, 0x0c, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f,
    0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0xff, 0xff,
    0xff, 0xff, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc0, 0xc0, 0x00, 0x00, 0x0c, 0x0c, 0x0f, 0x0f, 0x0f, 0x0f, 0x0c, 0x0c,
    0x0c, 0x0c, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff, 0xfc, 0xfc, 0xf0, 0xf0, 0xfc, 0xfc, 0xff, 0xff,
    0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x03, 0x03,
    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfc, 0xf0, 0xf0,
    0xc0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
    0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f,
    0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xfc, 0xfc,
    0x0f, 0x0f, 0x03, 0x03, 0x0f, 0x0f, 0xfc, 0xfc, 0xf0, 0xf0, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
    0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c,
    0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x03, 0xff, 0xff, 0xff, 0xff, 0x03, 0x03, 0x03, 0x03, 0xff, 0xff,
    0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0xff, 0xff, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0xff, 0xff, 0xfc, 0xfc, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
    0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff,
    0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0xff, 0xff,
    0xff, 0xff, 0x03, 0x03, 0x03, 0x03, 0xff, 0xff, 0xfc, 0xfc, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x03, 0x03, 0x0f, 0x0f, 0xff, 0xff,
    0xf0, 0xf0, 0x00, 0x00, 0x0c, 0x0c, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x3c, 0x3c, 0xff, 0xff, 0xc3, 0xc3, 0x03, 0x03, 0x03, 0x03, 0x3f, 0x3f,
    0x3c, 0x3c, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0x03, 0x03, 0x03, 0x03,
    0x0f, 0x0f, 0xfc, 0xfc, 0xf0, 0xf0, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f,
    0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x3f, 0x0f, 0x0f, 0xff, 0xff,
    0xff, 0xff, 0x0f, 0x0f, 0x3f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x0f, 0x0f, 0x0f, 0x0f, 0x0c, 0x0c,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
    0xff, 0xff, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c,
    0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
    0xff, 0xff, 0x00, 0x00, 0x3f, 0x3f, 0xff, 0xff, 0xc0, 0xc0, 0x00, 0x00,
    0xc0, 0xc0, 0xff, 0xff, 0x3f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x03, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    0xc0, 0xc0, 0xfc, 0xfc, 0xc0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0xff, 0xff,
    0xf0, 0xf0, 0x00, 0x00, 0xf0, 0xf0, 0xff, 0xff, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0xf0, 0xf0, 0xff, 0xff, 0x0f, 0x0f, 0xff, 0xff, 0xf0, 0xf0,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
    0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0xff, 0xff,
    0xff, 0xff, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0c, 0x0f, 0x0f, 0x0f, 0x0f, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3f, 0x3f, 0x0f, 0x0f, 0x03, 0x03, 0x03, 0x03,
    0xc3, 0xc3, 0xff, 0xff, 0x3f, 0x3f, 0x00, 0x00, 0xc0, 0xc0, 0xf0, 0xf0,
    0x3c, 0x3c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f,
    0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0c, 0x0c, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xfc, 0xfc, 0xf0, 0xf0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x3f, 0x3f,
    0xfc, 0xfc, 0xf0, 0xf0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03,
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f, 0x0f, 0x0f,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc0, 0xc0, 0xf0, 0xf0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f,
    0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xf0, 0xf0, 0xfc, 0xfc, 0x0c, 0x0c, 0x0c, 0x0c, 0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c,
    0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x03, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
    0x03, 0x03, 0xff, 0xff, 0xfc, 0xfc, 0x00, 0x00, 0x0c, 0x0c, 0x0f, 0x0f,
    0x03, 0x03, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00,
    0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f,
    0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc0, 0xc0, 0xc3, 0xc3, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    0xfc, 0xfc, 0xff, 0xff, 0x03, 0x03, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c,
    0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x0c, 0x0c, 0x0c, 0x0c,
    0x0c, 0x0c, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f,
    0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0xff, 0xff, 0x03, 0x03,
    0x0f, 0x0f, 0x3c, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0xff, 0xff,
    0xff, 0xff, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0c, 0x0f, 0x0f, 0x0f, 0x0f, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xcf, 0xcf, 0x0c, 0x0c, 0x0c, 0x0c,
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x03, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x03, 0x03,
    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0c, 0x0c, 0x0f, 0x0f,
    0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xcf, 0xcf,
    0xcf, 0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x0f, 0x0f, 0x0f, 0x0f, 0x0c, 0x0c,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xcf, 0xcf, 0xcf, 0xcf, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
    0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x03, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0,
    0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x3c, 0x3c,
    0xff, 0xff, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x0f, 0x0f,
    0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0xff, 0xff,
    0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x0f, 0x0f, 0x0f, 0x0f, 0x0c, 0x0c,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff, 0x03, 0x03, 0xff, 0xff, 0x03, 0x03, 0xff, 0xff,
    0xff, 0xff, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x0f, 0x0f,
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f,
    0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
    0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f,
    0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0,
    0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
    0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x0c, 0x0c,
    0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0xc0, 0xc0,
    0xc0, 0xc0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f,
    0x0c, 0x0c, 0x0c, 0x0c, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
    0xff, 0xff, 0x03, 0x03, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x00, 0x00,
    0x0c, 0x0c, 0x0f, 0x0f, 0x0f, 0x0f, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x03, 0x0f, 0x0f, 0x3c, 0x3c, 0x30, 0x30, 0xf0, 0xf0, 0xc3, 0xc3,
    0x03, 0x03, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c,
    0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc0, 0xc0, 0xc0, 0xc0, 0xfc, 0xfc, 0xff, 0xff, 0xc0, 0xc0, 0xc0, 0xc0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
    0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x03, 0x03, 0x0f, 0x0f,
    0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0,
    0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
    0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f,
    0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0,
    0xc0, 0xc0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xf0, 0xf0,
    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f,
    0x0f, 0x0f, 0x03, 0x03, 0x0f, 0x0f, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03,
    0xff, 0xff, 0xfc, 0xfc, 0xff, 0xff, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f,
    0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
    0xff, 0xff, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c,
    0xcc, 0xcc, 0xff, 0xff, 0x3f, 0x3f, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0x00, 0x00, 0x03, 0x03, 0xc3, 0xc3, 0xf0, 0xf0, 0x3c, 0x3c,
    0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc,
    0xff, 0xff, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03,
    0x03, 0x03, 0xff, 0xff, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x0c, 0x0c,
    0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f,
    0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0xff, 0xff, 0xfc, 0xfc, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc,
    0xff, 0xff, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c,
    0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x0f, 0x0f,
    0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc0, 0xc0, 0xf0, 0xf0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xfc, 0xfc, 0xff, 0xff, 0x03, 0x03, 0x00, 0x00, 0x03, 0x03, 0xff, 0xff,
    0xfc, 0xfc, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
#endif
const uint8_t ucSmallFont[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x5f, 0x06, 0x00, 0x07, 0x03,
    0x00, 0x07, 0x03, 0x24, 0x7e, 0x24, 0x7e, 0x24, 0x24, 0x2b, 0x6a, 0x12,
    0x00, 0x63, 0x13, 0x08, 0x64, 0x63, 0x36, 0x49, 0x56, 0x20, 0x50, 0x00,
    0x07, 0x03, 0x00, 0x00, 0x00, 0x3e, 0x41, 0x00, 0x00, 0x00, 0x41, 0x3e,
    0x00, 0x00, 0x08, 0x3e, 0x1c, 0x3e, 0x08, 0x08, 0x08, 0x3e, 0x08, 0x08,
    0x00, 0xe0, 0x60, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x60,
    0x60, 0x00, 0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x3e, 0x51, 0x49, 0x45,
    0x3e, 0x00, 0x42, 0x7f, 0x40, 0x00, 0x62, 0x51, 0x49, 0x49, 0x46, 0x22,
    0x49, 0x49, 0x49, 0x36, 0x18, 0x14, 0x12, 0x7f, 0x10, 0x2f, 0x49, 0x49,
    0x49, 0x31, 0x3c, 0x4a, 0x49, 0x49, 0x30, 0x01, 0x71, 0x09, 0x05, 0x03,
    0x36, 0x49, 0x49, 0x49, 0x36, 0x06, 0x49, 0x49, 0x29, 0x1e, 0x00, 0x6c,
    0x6c, 0x00, 0x00, 0x00, 0xec, 0x6c, 0x00, 0x00, 0x08, 0x14, 0x22, 0x41,
    0x00, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00, 0x41, 0x22, 0x14, 0x08, 0x02,
    0x01, 0x59, 0x09, 0x06, 0x3e, 0x41, 0x5d, 0x55, 0x1e, 0x7e, 0x11, 0x11,
    0x11, 0x7e, 0x7f, 0x49, 0x49, 0x49, 0x36, 0x3e, 0x41, 0x41, 0x41, 0x22,
    0x7f, 0x41, 0x41, 0x41, 0x3e, 0x7f, 0x49, 0x49, 0x49, 0x41, 0x7f, 0x09,
    0x09, 0x09, 0x01, 0x3e, 0x41, 0x49, 0x49, 0x7a, 0x7f, 0x08, 0x08, 0x08,
    0x7f, 0x00, 0x41, 0x7f, 0x41, 0x00, 0x30, 0x40, 0x40, 0x40, 0x3f, 0x7f,
    0x08, 0x14, 0x22, 0x41, 0x7f, 0x40, 0x40, 0x40, 0x40, 0x7f, 0x02, 0x04,
    0x02, 0x7f, 0x7f, 0x02, 0x04, 0x08, 0x7f, 0x3e, 0x41, 0x41, 0x41, 0x3e,
    0x7f, 0x09, 0x09, 0x09, 0x06, 0x3e, 0x41, 0x51, 0x21, 0x5e, 0x7f, 0x09,
    0x09, 0x19, 0x66, 0x26, 0x49, 0x49, 0x49, 0x32, 0x01, 0x01, 0x7f, 0x01,
    0x01, 0x3f, 0x40, 0x40, 0x40, 0x3f, 0x1f, 0x20, 0x40, 0x20, 0x1f, 0x3f,
    0x40, 0x3c, 0x40, 0x3f, 0x63, 0x14, 0x08, 0x14, 0x63, 0x07, 0x08, 0x70,
    0x08, 0x07, 0x71, 0x49, 0x45, 0x43, 0x00, 0x00, 0x7f, 0x41, 0x41, 0x00,
    0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x41, 0x41, 0x7f, 0x00, 0x04, 0x02,
    0x01, 0x02, 0x04, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x03, 0x07, 0x00,
    0x00, 0x20, 0x54, 0x54, 0x54, 0x78, 0x7f, 0x44, 0x44, 0x44, 0x38, 0x38,
    0x44, 0x44, 0x44, 0x28, 0x38, 0x44, 0x44, 0x44, 0x7f, 0x38, 0x54, 0x54,
    0x54, 0x08, 0x08, 0x7e, 0x09, 0x09, 0x00, 0x18, 0xa4, 0xa4, 0xa4, 0x7c,
    0x7f, 0x04, 0x04, 0x78, 0x00, 0x00, 0x00, 0x7d, 0x40, 0x00, 0x40, 0x80,
    0x84, 0x7d, 0x00, 0x7f, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00, 0x7f, 0x40,
    0x00, 0x7c, 0x04, 0x18, 0x04, 0x78, 0x7c, 0x04, 0x04, 0x78, 0x00, 0x38,
    0x44, 0x44, 0x44, 0x38, 0xfc, 0x44, 0x44, 0x44, 0x38, 0x38, 0x44, 0x44,
    0x44, 0xfc, 0x44, 0x78, 0x44, 0x04, 0x08, 0x08, 0x54, 0x54, 0x54, 0x20,
    0x04, 0x3e, 0x44, 0x24, 0x00, 0x3c, 0x40, 0x20, 0x7c, 0x00, 0x1c, 0x20,
    0x40, 0x20, 0x1c, 0x3c, 0x60, 0x30, 0x60, 0x3c, 0x6c, 0x10, 0x10, 0x6c,
    0x00, 0x9c, 0xa0, 0x60, 0x3c, 0x00, 0x64, 0x54, 0x54, 0x4c, 0x00, 0x08,
    0x3e, 0x41, 0x41, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x41, 0x41,
    0x3e, 0x08, 0x02, 0x01, 0x02, 0x01, 0x00, 0x3c, 0x26, 0x23, 0x26, 0x3c};
const unsigned char oled128_initbuf[] = {
    0x00, 0xae, 0xdc, 0x00, 0x81, 0x40, 0xa1, 0xc8, 0xa8, 0x7f, 0xd5,
    0x50, 0xd9, 0x22, 0xdb, 0x35, 0xb0, 0xda, 0x12, 0xa4, 0xa6, 0xaf};
const unsigned char oled64_initbuf[] = {
    0x00, 0xae, 0xa8, 0x3f, 0xd3, 0x00, 0x40, 0xa1, 0xc8, 0xda, 0x12,
    0x81, 0xff, 0xa4, 0xa6, 0xd5, 0x80, 0x8d, 0x14, 0xaf, 0x20, 0x02};
const unsigned char oled32_initbuf[] = {
    0x00, 0xae, 0xd5, 0x80, 0xa8, 0x1f, 0xd3, 0x00, 0x40, 0x8d, 0x14, 0xa1,
    0xc8, 0xda, 0x02, 0x81, 0x7f, 0xd9, 0xf1, 0xdb, 0x40, 0xa4, 0xa6, 0xaf};
const unsigned char oled72_initbuf[] = {
    0x00, 0xae, 0xa8, 0x3f, 0xd3, 0x00, 0x40, 0xa1, 0xc8,
    0xda, 0x12, 0x81, 0xff, 0xad, 0x30, 0xd9, 0xf1, 0xa4,
    0xa6, 0xd5, 0x80, 0x8d, 0x14, 0xaf, 0x20, 0x02};
static int iCSPin, iDCPin, iResetPin;
#define MAX_CACHE 32
static void oledWriteCommand(SSOLED *pOLED, unsigned char c);
void InvertBytes(uint8_t *pData, uint8_t bLen);
#ifdef _LINUX_
static uint8_t pgm_read_byte(uint8_t *ptr) { return *ptr; }
static int16_t pgm_read_word(uint8_t *ptr) { return ptr[0] + (ptr[1] << 8); }
#endif
static void _I2CWrite(SSOLED *pOLED, unsigned char *pData, int iLen) {
#if !defined(_LINUX_) && !defined(__AVR_ATtiny85__)
  if (iCSPin != -1) {
    digitalWrite(iDCPin, (pData[0] == 0) ? LOW : HIGH);
    digitalWrite(iCSPin, LOW);
#ifdef HAL_ESP32_HAL_H_
    {
      uint8_t ucTemp[1024];
      SPI.transferBytes(&pData[1], ucTemp, iLen - 1);
    }
#else
    SPI.transfer(&pData[1], iLen - 1);
#endif
    digitalWrite(iCSPin, HIGH);
  } else
#endif
  {
    I2CWrite(&pOLED->bbi2c, pOLED->oled_addr, pData, iLen);
  }
}
#ifdef FUTURE
static void oledCachedFlush(void) {
  _I2CWrite(bCache, bEnd);
#ifdef USE_BACKBUFFER
  memcpy(&ucScreen[iScreenOffset], &bCache[1], bEnd - 1);
  iScreenOffset += (bEnd - 1);
#endif
  bEnd = 1;
}
static void oledCachedWrite(uint8_t *pData, uint8_t bLen) {
  if (bEnd + bLen > MAX_CACHE) {
    oledCachedFlush();
  }
  memcpy(&bCache[bEnd], pData, bLen);
  bEnd += bLen;
}
#endif
#if !defined(__AVR_ATtiny85__) && !defined(_LINUX_)
#ifdef FUTURE
void oledSPIInit(int iType, int iDC, int iCS, int iReset, int bFlip,
                 int bInvert, int32_t iSpeed) {
  uint8_t uc[32], *s;
  int iLen;
  ucScreen = NULL;
  iDCPin = iDC;
  iCSPin = iCS;
  iResetPin = iReset;
  oled_type = iType;
  oled_flip = bFlip;
  oled_wrap = 0;
  pinMode(iDCPin, OUTPUT);
  pinMode(iCSPin, OUTPUT);
  digitalWrite(iCSPin, HIGH);
  if (iResetPin != -1) {
    pinMode(iResetPin, OUTPUT);
    digitalWrite(iResetPin, HIGH);
    delay(50);
    digitalWrite(iResetPin, LOW);
    delay(50);
    digitalWrite(iResetPin, HIGH);
    delay(10);
  }
  SPI.begin();
  SPI.beginTransaction(SPISettings(iSpeed, MSBFIRST, SPI_MODE0));
  if (iType == OLED_128x32 || iType == OLED_96x16) {
    s = (uint8_t *)oled32_initbuf;
    iLen = sizeof(oled32_initbuf);
  } else if (iType == OLED_128x128) {
    s = (uint8_t *)oled128_initbuf;
    iLen = sizeof(oled128_initbuf);
  } else {
    s = (uint8_t *)oled64_initbuf;
    iLen = sizeof(oled64_initbuf);
  }
  memcpy(uc, s, iLen);
  _I2CWrite(pOLED, s, iLen);
  if (bInvert) {
    uc[0] = 0;
    uc[1] = 0xa7;
    _I2CWrite(pOLED, uc, 2);
  }
  if (bFlip) {
    uc[0] = 0;
    uc[1] = 0xa0;
    _I2CWrite(pOLED, uc, 2);
    uc[0] = 0;
    uc[1] = 0xc0;
    _I2CWrite(pOLED, uc, 2);
  }
}
#endif
#endif
int oledInit(SSOLED *pOLED, int iType, int iAddr, int bFlip, int bInvert,
             int bWire, int sda, int scl, int reset, int32_t iSpeed) {
  unsigned char uc[4];
  int rc = OLED_NOT_FOUND;
  pOLED->ucScreen = NULL;
  pOLED->oled_type = iType;
  pOLED->oled_flip = bFlip;
  pOLED->oled_wrap = 0;
#ifdef _LINUX_
  pOLED->bbi2c.iBus = sda;
#endif
  pOLED->bbi2c.bWire = bWire;
  pOLED->bbi2c.iSDA = sda;
  pOLED->bbi2c.iSCL = scl;
  iResetPin = reset;
  iCSPin = iDCPin = -1;
  I2CInit(&pOLED->bbi2c, iSpeed);
#ifndef _LINUX_
  if (iResetPin != -1) {
    pinMode(iResetPin, OUTPUT);
    digitalWrite(iResetPin, HIGH);
    delay(50);
    digitalWrite(iResetPin, LOW);
    delay(50);
    digitalWrite(iResetPin, HIGH);
    delay(10);
  }
#endif
  if (iAddr == -1 || iAddr == 0 || iAddr == 0xff) {
    I2CTest(&pOLED->bbi2c, 0x3c);
    if (I2CTest(&pOLED->bbi2c, 0x3c))
      pOLED->oled_addr = 0x3c;
    else if (I2CTest(&pOLED->bbi2c, 0x3d))
      pOLED->oled_addr = 0x3d;
    else
      return rc;
  } else {
    pOLED->oled_addr = iAddr;
    I2CTest(&pOLED->bbi2c, iAddr);
    if (!I2CTest(&pOLED->bbi2c, iAddr))
      return rc;
  }
  uint8_t u = 0;
  I2CReadRegister(&pOLED->bbi2c, pOLED->oled_addr, 0x00, &u, 1);
  u &= 0x0f;
  if (u == 0x7 || u == 0xf) {
    pOLED->oled_type = OLED_128x128;
    rc = OLED_SH1107_3C;
    bFlip = !bFlip;
  } else if (u == 0x8) {
    rc = OLED_SH1106_3C;
    pOLED->oled_type = OLED_132x64;
  } else if (u == 3 || u == 6) {
    rc = OLED_SSD1306_3C;
  }
  if (pOLED->oled_addr == 0x3d)
    rc++;
  if (iType == OLED_128x32 || iType == OLED_96x16)
    _I2CWrite(pOLED, (unsigned char *)oled32_initbuf, sizeof(oled32_initbuf));
  else if (iType == OLED_128x128)
    _I2CWrite(pOLED, (unsigned char *)oled128_initbuf, sizeof(oled128_initbuf));
  else if (iType == OLED_72x40)
    _I2CWrite(pOLED, (unsigned char *)oled72_initbuf, sizeof(oled72_initbuf));
  else
    _I2CWrite(pOLED, (unsigned char *)oled64_initbuf, sizeof(oled64_initbuf));
  if (bInvert) {
    uc[0] = 0;
    uc[1] = 0xa7;
    _I2CWrite(pOLED, uc, 2);
  }
  if (bFlip) {
    uc[0] = 0;
    uc[1] = 0xa0;
    _I2CWrite(pOLED, uc, 2);
    uc[1] = 0xc0;
    _I2CWrite(pOLED, uc, 2);
  }
  pOLED->oled_x = 128;
  pOLED->oled_y = 64;
  if (iType == OLED_96x16) {
    pOLED->oled_x = 96;
    pOLED->oled_y = 16;
  } else if (iType == OLED_128x32)
    pOLED->oled_y = 32;
  else if (iType == OLED_128x128)
    pOLED->oled_y = 128;
  else if (iType == OLED_64x32) {
    pOLED->oled_x = 64;
    pOLED->oled_y = 32;
  } else if (iType == OLED_72x40) {
    pOLED->oled_x = 72;
    pOLED->oled_y = 40;
  }
  return rc;
}
void oledPower(SSOLED *pOLED, uint8_t bOn) {
  if (bOn)
    oledWriteCommand(pOLED, 0xaf);
  else
    oledWriteCommand(pOLED, 0xae);
}
static void oledWriteCommand(SSOLED *pOLED, unsigned char c) {
  unsigned char buf[2];
  buf[0] = 0x00;
  buf[1] = c;
  _I2CWrite(pOLED, buf, 2);
}
static void oledWriteCommand2(SSOLED *pOLED, unsigned char c, unsigned char d) {
  unsigned char buf[3];
  buf[0] = 0x00;
  buf[1] = c;
  buf[2] = d;
  _I2CWrite(pOLED, buf, 3);
}
void oledSetContrast(SSOLED *pOLED, unsigned char ucContrast) {
  oledWriteCommand2(pOLED, 0x81, ucContrast);
}
int oledScrollBuffer(SSOLED *pOLED, int iStartCol, int iEndCol, int iStartRow,
                     int iEndRow, int bUp) {
  uint8_t b, *s;
  int col, row;
  if (iStartCol < 0 || iStartCol > 127 || iEndCol < 0 || iEndCol > 127 ||
      iStartCol > iEndCol)
    return -1;
  if (iStartRow < 0 || iStartRow > 7 || iEndRow < 0 || iEndRow > 7 ||
      iStartRow > iEndRow)
    return -1;
  if (bUp) {
    for (row = iStartRow; row <= iEndRow; row++) {
      s = &pOLED->ucScreen[(row * 128) + iStartCol];
      for (col = iStartCol; col <= iEndCol; col++) {
        b = *s;
        b >>= 1;
        if (row < iEndRow)
          b |= (s[128] << 7);
        *s++ = b;
      }
    }
  } else {
    for (row = iEndRow; row >= iStartRow; row--) {
      s = &pOLED->ucScreen[(row * 128) + iStartCol];
      for (col = iStartCol; col <= iEndCol; col++) {
        b = *s;
        b <<= 1;
        if (row > iStartRow)
          b |= (s[-128] >> 7);
        *s++ = b;
      }
    }
  }
  return 0;
}
static void oledSetPosition(SSOLED *pOLED, int x, int y, int bRender) {
  unsigned char buf[4];
  pOLED->iScreenOffset = (y * 128) + x;
  if (!bRender)
    return;
  if (pOLED->oled_type == OLED_64x32) {
    x += 32;
    if (pOLED->oled_flip == 0)
      y += 4;
  } else if (pOLED->oled_type == OLED_132x64) {
    x += 2;
  } else if (pOLED->oled_type == OLED_96x16) {
    if (pOLED->oled_flip)
      x += 32;
    else
      y += 2;
  } else if (pOLED->oled_type == OLED_72x40) {
    x += 28;
    if (!pOLED->oled_flip) {
      y += 3;
    }
  }
  buf[0] = 0x00;
  buf[1] = 0xb0 | y;
  buf[2] = x & 0xf;
  buf[3] = 0x10 | (x >> 4);
  _I2CWrite(pOLED, buf, 4);
}
static void oledWriteDataBlock(SSOLED *pOLED, unsigned char *ucBuf, int iLen,
                               int bRender) {
  unsigned char ucTemp[129];
  ucTemp[0] = 0x40;
  if (bRender) {
    memcpy(&ucTemp[1], ucBuf, iLen);
    _I2CWrite(pOLED, ucTemp, iLen + 1);
  }
  if (pOLED->ucScreen) {
    memcpy(&pOLED->ucScreen[pOLED->iScreenOffset], ucBuf, iLen);
    pOLED->iScreenOffset += iLen;
    pOLED->iScreenOffset &= 1023;
  }
}
#define OP_MASK 0xc0
#define OP_SKIPCOPY 0x00
#define OP_COPYSKIP 0x40
#define OP_REPEATSKIP 0x80
#define OP_REPEAT 0xc0
void oledWriteFlashBlock(SSOLED *pOLED, uint8_t *s, int iLen) {
  int j;
  int iWidthMask = pOLED->oled_x - 1;
  int iSizeMask = ((pOLED->oled_x * pOLED->oled_y) / 8) - 1;
  int iWidthShift = (pOLED->oled_x == 128) ? 7 : 6;
  uint8_t ucTemp[128];
  while (((pOLED->iScreenOffset & iWidthMask) + iLen) >= pOLED->oled_x) {
    j = pOLED->oled_x - (pOLED->iScreenOffset & iWidthMask);
    memcpy_P(ucTemp, s, j);
    oledWriteDataBlock(pOLED, ucTemp, j, 1);
    s += j;
    iLen -= j;
    pOLED->iScreenOffset = (pOLED->iScreenOffset + j) & iSizeMask;
    oledSetPosition(pOLED, pOLED->iScreenOffset & iWidthMask,
                    (pOLED->iScreenOffset >> iWidthShift), 1);
  }
  memcpy_P(ucTemp, s, iLen);
  oledWriteDataBlock(pOLED, ucTemp, iLen, 1);
  pOLED->iScreenOffset = (pOLED->iScreenOffset + iLen) & iSizeMask;
}
void oledRepeatByte(SSOLED *pOLED, uint8_t b, int iLen) {
  int j;
  int iWidthMask = pOLED->oled_x - 1;
  int iWidthShift = (pOLED->oled_x == 128) ? 7 : 6;
  int iSizeMask = ((pOLED->oled_x * pOLED->oled_y) / 8) - 1;
  uint8_t ucTemp[128];
  memset(ucTemp, b, (iLen > 128) ? 128 : iLen);
  while (((pOLED->iScreenOffset & iWidthMask) + iLen) >= pOLED->oled_x) {
    j = pOLED->oled_x - (pOLED->iScreenOffset & iWidthMask);
    oledWriteDataBlock(pOLED, ucTemp, j, 1);
    iLen -= j;
    pOLED->iScreenOffset = (pOLED->iScreenOffset + j) & iSizeMask;
    oledSetPosition(pOLED, pOLED->iScreenOffset & iWidthMask,
                    (pOLED->iScreenOffset >> iWidthShift), 1);
  }
  oledWriteDataBlock(pOLED, ucTemp, iLen, 1);
  pOLED->iScreenOffset += iLen;
}
uint8_t *oledPlayAnimFrame(SSOLED *pOLED, uint8_t *pAnimation,
                           uint8_t *pCurrent, int iLen) {
  uint8_t *s;
  int i, j;
  unsigned char b, bCode;
  int iBufferSize = (pOLED->oled_x * pOLED->oled_y) / 8;
  int iWidthMask, iWidthShift;
  iWidthMask = pOLED->oled_x - 1;
  iWidthShift = (pOLED->oled_x == 128) ? 7 : 6;
  if (pCurrent == NULL || pCurrent > pAnimation + iLen)
    return NULL;
  s = (uint8_t *)pCurrent;
  i = 0;
  oledSetPosition(pOLED, 0, 0, 1);
  while (i < iBufferSize) {
    bCode = pgm_read_byte(s++);
    switch (bCode & OP_MASK) {
    case OP_SKIPCOPY:
      if (bCode == OP_SKIPCOPY) {
        b = pgm_read_byte(s++);
        i += b + 1;
        oledSetPosition(pOLED, i & iWidthMask, (i >> iWidthShift), 1);
      } else {
        if (bCode & 0x38) {
          i += ((bCode & 0x38) >> 3);
          oledSetPosition(pOLED, i & iWidthMask, (i >> iWidthShift), 1);
        }
        if (bCode & 7) {
          oledWriteFlashBlock(pOLED, s, bCode & 7);
          s += (bCode & 7);
          i += bCode & 7;
        }
      }
      break;
    case OP_COPYSKIP:
      if (bCode == OP_COPYSKIP) {
        b = pgm_read_byte(s++);
        j = b + 1;
        oledWriteFlashBlock(pOLED, s, j);
        s += j;
        i += j;
      } else {
        j = ((bCode & 0x38) >> 3);
        if (j) {
          oledWriteFlashBlock(pOLED, s, j);
          s += j;
          i += j;
        }
        if (bCode & 7) {
          i += (bCode & 7);
          oledSetPosition(pOLED, i & iWidthMask, (i >> iWidthShift), 1);
        }
      }
      break;
    case OP_REPEATSKIP:
      j = (bCode & 0x38) >> 3;
      b = pgm_read_byte(s++);
      oledRepeatByte(pOLED, b, j);
      i += j;
      if (bCode & 7) {
        i += (bCode & 7);
        oledSetPosition(pOLED, i & iWidthMask, (i >> iWidthShift), 1);
      }
      break;
    case OP_REPEAT:
      j = (bCode & 0x3f) + 1;
      b = pgm_read_byte(s++);
      oledRepeatByte(pOLED, b, j);
      i += j;
      break;
    }
  }
  if (s >= pAnimation + iLen)
    s = pAnimation;
  return s;
}
void oledDrawSprite(SSOLED *pOLED, uint8_t *pSprite, int cx, int cy, int iPitch,
                    int x, int y, uint8_t iPriority) {
  int tx, ty, dx, dy, iStartX;
  uint8_t *s, *d, uc, pix, ucSrcMask, ucDstMask;
  if (x + cx < 0 || y + cy < 0 || x >= pOLED->oled_x || y >= pOLED->oled_y ||
      pOLED->ucScreen == NULL)
    return;
  dy = y;
  if (y < 0) {
    cy += y;
    y = -y;
    pSprite += (y * iPitch);
    dy = 0;
  }
  if (y + cy > pOLED->oled_y)
    cy = pOLED->oled_y - y;
  iStartX = 0;
  dx = x;
  if (x < 0) {
    cx += x;
    x = -x;
    iStartX = x;
    dx = 0;
  }
  if (x + cx > pOLED->oled_x)
    cx = pOLED->oled_x - x;
  for (ty = 0; ty < cy; ty++) {
    s = &pSprite[iStartX >> 3];
    d = &pOLED->ucScreen[(dy >> 3) * pOLED->oled_x + dx];
    ucSrcMask = 0x80 >> (iStartX & 7);
    pix = *s++;
    ucDstMask = 1 << (dy & 7);
    if (iPriority) {
      for (tx = 0; tx < cx; tx++) {
        uc = d[0];
        if (pix & ucSrcMask)
          d[0] = (uc | ucDstMask);
        d++;
        ucSrcMask >>= 1;
        if (ucSrcMask == 0) {
          ucSrcMask = 0x80;
          pix = *s++;
        }
      }
    } else {
      for (tx = 0; tx < cx; tx++) {
        uc = d[0];
        if (pix & ucSrcMask)
          d[0] = (uc & ~ucDstMask);
        d++;
        ucSrcMask >>= 1;
        if (ucSrcMask == 0) {
          ucSrcMask = 0x80;
          pix = *s++;
        }
      }
    }
    dy++;
    pSprite += iPitch;
  }
}
void oledDrawTile(SSOLED *pOLED, const uint8_t *pTile, int x, int y,
                  int iRotation, int bInvert, int bRender) {
  uint8_t ucTemp[32];
  uint8_t i, j, k, iOffset, ucMask, uc, ucPixels;
  uint8_t bFlipX = 0, bFlipY = 0;
  if (x < 0 || y < 0 || y > 6 || x > 112)
    return;
  if (pTile == NULL)
    return;
  if (iRotation == ANGLE_180 || iRotation == ANGLE_270 ||
      iRotation == ANGLE_FLIPX)
    bFlipX = 1;
  if (iRotation == ANGLE_180 || iRotation == ANGLE_270 ||
      iRotation == ANGLE_FLIPY)
    bFlipY = 1;
  memset(ucTemp, 0, sizeof(ucTemp));
  if (iRotation == ANGLE_0 || iRotation == ANGLE_180 ||
      iRotation == ANGLE_FLIPX || iRotation == ANGLE_FLIPY) {
    for (j = 0; j < 16; j++) {
      for (i = 0; i < 16; i += 8) {
        ucPixels = pgm_read_byte((uint8_t *)pTile++);
        ucMask = 0x80;
        for (k = 0; k < 8; k++) {
          if (ucPixels & ucMask) {
            if (bFlipY)
              uc = 0x80 >> (j & 7);
            else
              uc = 1 << (j & 7);
            iOffset = i + k;
            if (bFlipX)
              iOffset = 15 - iOffset;
            iOffset += (j & 8) << 1;
            if (bFlipY)
              iOffset ^= 16;
            ucTemp[iOffset] |= uc;
          }
          ucMask >>= 1;
        }
      }
    }
  } else {
    for (j = 0; j < 16; j++) {
      for (i = 0; i < 16; i += 8) {
        ucPixels = pgm_read_byte((uint8_t *)pTile++);
        ucMask = 0x80;
        for (k = 0; k < 8; k++) {
          if (ucPixels & ucMask) {
            if (bFlipY)
              uc = 0x80 >> k;
            else
              uc = 1 << k;
            iOffset = 15 - j;
            if (bFlipX)
              iOffset = 15 - iOffset;
            iOffset += i << 1;
            if (bFlipY)
              iOffset ^= 16;
            ucTemp[iOffset] |= uc;
          }
          ucMask >>= 1;
        }
      }
    }
  }
  if (bInvert)
    InvertBytes(ucTemp, 32);
  oledSetPosition(pOLED, x, y, bRender);
  oledWriteDataBlock(pOLED, ucTemp, 16, bRender);
  oledSetPosition(pOLED, x, y + 1, bRender);
  oledWriteDataBlock(pOLED, &ucTemp[16], 16, bRender);
}
int oledSetPixel(SSOLED *pOLED, int x, int y, unsigned char ucColor,
                 int bRender) {
  int i;
  unsigned char uc, ucOld;
  i = ((y >> 3) * 128) + x;
  if (i < 0 || i > 1023)
    return -1;
  oledSetPosition(pOLED, x, y >> 3, bRender);
  if (pOLED->ucScreen)
    uc = ucOld = pOLED->ucScreen[i];
  else if (pOLED->oled_type == OLED_132x64 ||
           pOLED->oled_type == OLED_128x128) {
    uint8_t ucTemp[3];
    ucTemp[0] = 0x80;
    ucTemp[1] = 0xE0;
    ucTemp[2] = 0xC0;
    _I2CWrite(pOLED, ucTemp, 3);
    I2CRead(&pOLED->bbi2c, pOLED->oled_addr, ucTemp, 2);
    uc = ucOld = ucTemp[1];
  } else
    uc = ucOld = 0;
  uc &= ~(0x1 << (y & 7));
  if (ucColor) {
    uc |= (0x1 << (y & 7));
  }
  if (uc != ucOld) {
    if (pOLED->ucScreen) {
      oledWriteDataBlock(pOLED, &uc, 1, bRender);
      pOLED->ucScreen[i] = uc;
    } else if (pOLED->oled_type == OLED_132x64 ||
               pOLED->oled_type == OLED_128x128) {
      uint8_t ucTemp[4];
      ucTemp[0] = 0xc0;
      ucTemp[1] = uc;
      ucTemp[2] = 0x80;
      ucTemp[3] = 0xEE;
      _I2CWrite(pOLED, ucTemp, 4);
    }
  }
  return 0;
}
void InvertBytes(uint8_t *pData, uint8_t bLen) {
  uint8_t i;
  for (i = 0; i < bLen; i++) {
    *pData = ~(*pData);
    pData++;
  }
}
int oledLoadBMP(SSOLED *pOLED, uint8_t *pBMP, int bInvert, int bRender) {
  int16_t i16;
  int iOffBits, q, y, j;
  int iPitch;
  uint8_t x, z, b, *s;
  uint8_t dst_mask;
  uint8_t ucTemp[16];
  uint8_t bFlipped = false;
  i16 = pgm_read_word(pBMP);
  if (i16 != 0x4d42)
    return -1;
  i16 = pgm_read_word(pBMP + 18);
  if (i16 != 128)
    return -1;
  i16 = pgm_read_word(pBMP + 22);
  if (i16 != 64 && i16 != -64)
    return -1;
  if (i16 == 64)
    bFlipped = true;
  i16 = pgm_read_word(pBMP + 28);
  if (i16 != 1)
    return -1;
  iOffBits = pgm_read_word(pBMP + 10);
  iPitch = 16;
  if (bFlipped) {
    iPitch = -16;
    iOffBits += (63 * 16);
  }
  for (y = 0; y < 8; y++) {
    oledSetPosition(pOLED, 0, y, bRender);
    for (j = 0; j < 8; j++) {
      s = &pBMP[iOffBits + (j * 2) + (y * iPitch * 8)];
      memset(ucTemp, 0, 16);
      for (x = 0; x < 16; x += 8) {
        dst_mask = 1;
        for (q = 0; q < 8; q++) {
          b = pgm_read_byte(s + (q * iPitch));
          for (z = 0; z < 8; z++) {
            if (b & 0x80)
              ucTemp[x + z] |= dst_mask;
            b <<= 1;
          }
          dst_mask <<= 1;
        }
        s++;
      }
      if (bInvert)
        InvertBytes(ucTemp, 16);
      oledWriteDataBlock(pOLED, ucTemp, 16, bRender);
    }
  }
  return 0;
}
void oledSetCursor(SSOLED *pOLED, int x, int y) {
  pOLED->iCursorX = x;
  pOLED->iCursorY = y;
}
void oledSetTextWrap(SSOLED *pOLED, int bWrap) { pOLED->oled_wrap = bWrap; }
int oledWriteString(SSOLED *pOLED, int iScroll, int x, int y, char *szMsg,
                    int iSize, int bInvert, int bRender) {
  int i, iFontOff, iLen, iFontSkip;
  unsigned char c, *s, ucTemp[40];
  if (x == -1 || y == -1) {
    x = pOLED->iCursorX;
    y = pOLED->iCursorY;
  } else {
    pOLED->iCursorX = x;
    pOLED->iCursorY = y;
  }
  if (pOLED->iCursorX >= pOLED->oled_x || pOLED->iCursorY >= pOLED->oled_y / 8)
    return -1;
  oledSetPosition(pOLED, pOLED->iCursorX, pOLED->iCursorY, bRender);
  if (iSize == FONT_8x8) {
    i = 0;
    iFontSkip = iScroll & 7;
    while (pOLED->iCursorX < pOLED->oled_x && szMsg[i] != 0 &&
           pOLED->iCursorY < pOLED->oled_y / 8) {
      if (iScroll < 8) {
        c = (unsigned char)szMsg[i];
        iFontOff = (int)(c - 32) * 7;
        ucTemp[0] = 0;
        memcpy_P(&ucTemp[1], &ucFont[iFontOff], 7);
        if (bInvert)
          InvertBytes(ucTemp, 8);
        iLen = 8 - iFontSkip;
        if (pOLED->iCursorX + iLen > pOLED->oled_x)
          iLen = pOLED->oled_x - pOLED->iCursorX;
        oledWriteDataBlock(pOLED, &ucTemp[iFontSkip], iLen, bRender);
        pOLED->iCursorX += iLen;
        if (pOLED->iCursorX >= pOLED->oled_x - 7 && pOLED->oled_wrap) {
          pOLED->iCursorX = 0;
          pOLED->iCursorY++;
          oledSetPosition(pOLED, pOLED->iCursorX, pOLED->iCursorY, bRender);
        }
        iFontSkip = 0;
      }
      iScroll -= 8;
      i++;
    }
    return 0;
  }
#ifndef __AVR__
  else if (iSize == FONT_16x32) {
    i = 0;
    iFontSkip = iScroll & 15;
    while (pOLED->iCursorX < pOLED->oled_x &&
           pOLED->iCursorY < (pOLED->oled_y / 8) - 3 && szMsg[i] != 0) {
      if (iScroll < 16) {
        s = (unsigned char *)&ucBigFont[(unsigned char)(szMsg[i] - 32) * 64];
        iLen = 16 - iFontSkip;
        if (pOLED->iCursorX + iLen > pOLED->oled_x)
          iLen = pOLED->oled_x - pOLED->iCursorX;
        oledSetPosition(pOLED, pOLED->iCursorX, pOLED->iCursorY, bRender);
        memcpy_P(ucTemp, s, 16);
        if (bInvert)
          InvertBytes(ucTemp, 16);
        oledWriteDataBlock(pOLED, &ucTemp[iFontSkip], iLen, bRender);
        oledSetPosition(pOLED, pOLED->iCursorX, pOLED->iCursorY + 1, bRender);
        memcpy_P(ucTemp, s + 16, 16);
        if (bInvert)
          InvertBytes(ucTemp, 16);
        oledWriteDataBlock(pOLED, &ucTemp[iFontSkip], iLen, bRender);
        if (pOLED->iCursorY <= 5) {
          oledSetPosition(pOLED, pOLED->iCursorX, pOLED->iCursorY + 2, bRender);
          memcpy_P(ucTemp, s + 32, 16);
          if (bInvert)
            InvertBytes(ucTemp, 16);
          oledWriteDataBlock(pOLED, &ucTemp[iFontSkip], iLen, bRender);
        }
        if (pOLED->iCursorY <= 4) {
          oledSetPosition(pOLED, pOLED->iCursorX, pOLED->iCursorY + 3, bRender);
          memcpy_P(ucTemp, s + 48, 16);
          if (bInvert)
            InvertBytes(ucTemp, 16);
          oledWriteDataBlock(pOLED, &ucTemp[iFontSkip], iLen, bRender);
        }
        pOLED->iCursorX += iLen;
        if (pOLED->iCursorX >= pOLED->oled_x - 15 && pOLED->oled_wrap) {
          pOLED->iCursorX = 0;
          pOLED->iCursorY += 4;
        }
        iFontSkip = 0;
      }
      iScroll -= 16;
      i++;
    }
    return 0;
  }
#endif
  else if (iSize == FONT_12x16) {
    i = 0;
    iFontSkip = iScroll % 12;
    while (pOLED->iCursorX < pOLED->oled_x &&
           pOLED->iCursorY < (pOLED->oled_y / 8) - 1 && szMsg[i] != 0) {
      if (iScroll < 12) {
        int tx, ty;
        c = szMsg[i] - 32;
        unsigned char uc1, uc2, ucMask, *pDest;
        s = (unsigned char *)&ucSmallFont[(int)c * 5];
        ucTemp[0] = 0;
        memcpy_P(&ucTemp[1], s, 6);
        if (bInvert)
          InvertBytes(ucTemp, 6);
        memset(&ucTemp[6], 0, 24);
        for (tx = 0; tx < 6; tx++) {
          ucMask = 3;
          pDest = &ucTemp[6 + tx * 2];
          uc1 = uc2 = 0;
          c = ucTemp[tx];
          for (ty = 0; ty < 4; ty++) {
            if (c & (1 << ty))
              uc1 |= ucMask;
            if (c & (1 << (ty + 4)))
              uc2 |= ucMask;
            ucMask <<= 2;
          }
          pDest[0] = uc1;
          pDest[1] = uc1;
          pDest[12] = uc2;
          pDest[13] = uc2;
        }
        for (tx = 0; tx < 5; tx++) {
          uint8_t c0, c1, ucMask2;
          c0 = ucTemp[tx];
          c1 = ucTemp[tx + 1];
          pDest = &ucTemp[6 + tx * 2];
          ucMask = 1;
          ucMask2 = 2;
          for (ty = 0; ty < 7; ty++) {
            if (((c0 & ucMask) && !(c1 & ucMask) && !(c0 & ucMask2) &&
                 (c1 & ucMask2)) ||
                (!(c0 & ucMask) && (c1 & ucMask) && (c0 & ucMask2) &&
                 !(c1 & ucMask2))) {
              if (ty < 3) {
                pDest[1] |= (1 << ((ty * 2) + 1));
                pDest[2] |= (1 << ((ty * 2) + 1));
                pDest[1] |= (1 << ((ty + 1) * 2));
                pDest[2] |= (1 << ((ty + 1) * 2));
              } else if (ty == 3) {
                pDest[1] |= 0x80;
                pDest[2] |= 0x80;
                pDest[13] |= 1;
                pDest[14] |= 1;
              } else {
                pDest[13] |= (1 << (2 * (ty - 4) + 1));
                pDest[14] |= (1 << (2 * (ty - 4) + 1));
                pDest[13] |= (1 << ((ty - 3) * 2));
                pDest[14] |= (1 << ((ty - 3) * 2));
              }
            } else if (!(c0 & ucMask) && (c1 & ucMask) && (c0 & ucMask2) &&
                       !(c1 & ucMask2)) {
              if (ty < 4) {
                pDest[1] |= (1 << ((ty * 2) + 1));
                pDest[2] |= (1 << ((ty + 1) * 2));
              } else {
                pDest[13] |= (1 << (2 * (ty - 4) + 1));
                pDest[14] |= (1 << ((ty - 3) * 2));
              }
            }
            ucMask <<= 1;
            ucMask2 <<= 1;
          }
        }
        iLen = 12 - iFontSkip;
        if (pOLED->iCursorX + iLen > pOLED->oled_x)
          iLen = pOLED->oled_x - pOLED->iCursorX;
        oledSetPosition(pOLED, pOLED->iCursorX, pOLED->iCursorY, bRender);
        oledWriteDataBlock(pOLED, &ucTemp[6 + iFontSkip], iLen, bRender);
        oledSetPosition(pOLED, pOLED->iCursorX, pOLED->iCursorY + 1, bRender);
        oledWriteDataBlock(pOLED, &ucTemp[18 + iFontSkip], iLen, bRender);
        pOLED->iCursorX += iLen;
        if (pOLED->iCursorX >= pOLED->oled_x - 11 && pOLED->oled_wrap) {
          pOLED->iCursorX = 0;
          pOLED->iCursorY += 2;
          oledSetPosition(pOLED, pOLED->iCursorX, pOLED->iCursorY, bRender);
        }
        iFontSkip = 0;
      }
      iScroll -= 12;
      i++;
    }
    return 0;
  } else if (iSize == FONT_16x16) {
    i = 0;
    iFontSkip = iScroll & 15;
    while (pOLED->iCursorX < pOLED->oled_x &&
           pOLED->iCursorY < (pOLED->oled_y / 8) - 1 && szMsg[i] != 0) {
      if (iScroll < 16) {
        int tx, ty;
        c = szMsg[i] - 32;
        unsigned char uc1, uc2, ucMask, *pDest;
        s = (unsigned char *)&ucFont[(int)c * 7];
        ucTemp[0] = 0;
        memcpy_P(&ucTemp[1], s, 7);
        if (bInvert)
          InvertBytes(ucTemp, 8);
        memset(&ucTemp[8], 0, 32);
        for (tx = 0; tx < 8; tx++) {
          ucMask = 3;
          pDest = &ucTemp[8 + tx * 2];
          uc1 = uc2 = 0;
          c = ucTemp[tx];
          for (ty = 0; ty < 4; ty++) {
            if (c & (1 << ty))
              uc1 |= ucMask;
            if (c & (1 << (ty + 4)))
              uc2 |= ucMask;
            ucMask <<= 2;
          }
          pDest[0] = uc1;
          pDest[1] = uc1;
          pDest[16] = uc2;
          pDest[17] = uc2;
        }
        iLen = 16 - iFontSkip;
        if (pOLED->iCursorX + iLen > pOLED->oled_x)
          iLen = pOLED->oled_x - pOLED->iCursorX;
        oledSetPosition(pOLED, pOLED->iCursorX, pOLED->iCursorY, bRender);
        oledWriteDataBlock(pOLED, &ucTemp[8 + iFontSkip], iLen, bRender);
        oledSetPosition(pOLED, pOLED->iCursorX, pOLED->iCursorY + 1, bRender);
        oledWriteDataBlock(pOLED, &ucTemp[24 + iFontSkip], iLen, bRender);
        pOLED->iCursorX += iLen;
        if (pOLED->iCursorX >= pOLED->oled_x - 15 && pOLED->oled_wrap) {
          pOLED->iCursorX = 0;
          pOLED->iCursorY += 2;
          oledSetPosition(pOLED, pOLED->iCursorX, pOLED->iCursorY, bRender);
        }
        iFontSkip = 0;
      }
      iScroll -= 16;
      i++;
    }
    return 0;
  } else if (iSize == FONT_6x8) {
    i = 0;
    iFontSkip = iScroll % 6;
    while (pOLED->iCursorX < pOLED->oled_x &&
           pOLED->iCursorY < (pOLED->oled_y / 8) && szMsg[i] != 0) {
      if (iScroll < 6) {
        c = szMsg[i] - 32;
        ucTemp[0] = 0;
        memcpy_P(&ucTemp[1], &ucSmallFont[(int)c * 5], 5);
        if (bInvert)
          InvertBytes(ucTemp, 6);
        iLen = 6 - iFontSkip;
        if (pOLED->iCursorX + iLen > pOLED->oled_x)
          iLen = pOLED->oled_x - pOLED->iCursorX;
        oledWriteDataBlock(pOLED, &ucTemp[iFontSkip], iLen, bRender);
        pOLED->iCursorX += iLen;
        iFontSkip = 0;
        if (pOLED->iCursorX >= pOLED->oled_x - 5 && pOLED->oled_wrap) {
          pOLED->iCursorX = 0;
          pOLED->iCursorY++;
          oledSetPosition(pOLED, pOLED->iCursorX, pOLED->iCursorY, bRender);
        }
      }
      iScroll -= 6;
      i++;
    }
    return 0;
  }
  return -1;
}
int oledDrawGFX(SSOLED *pOLED, uint8_t *pBuffer, int iSrcCol, int iSrcRow,
                int iDestCol, int iDestRow, int iWidth, int iHeight,
                int iSrcPitch) {
  int y;
  if (iSrcCol < 0 || iSrcCol > 127 || iSrcRow < 0 || iSrcRow > 7 ||
      iDestCol < 0 || iDestCol >= pOLED->oled_x || iDestRow < 0 ||
      iDestRow >= (pOLED->oled_y >> 3) || iSrcPitch <= 0)
    return -1;
  for (y = iSrcRow; y < iSrcRow + iHeight; y++) {
    uint8_t *s = &pBuffer[(y * iSrcPitch) + iSrcCol];
    oledSetPosition(pOLED, iDestCol, iDestRow, 1);
    oledWriteDataBlock(pOLED, s, iWidth, 1);
    pBuffer += iSrcPitch;
    iDestRow++;
  }
  return 0;
}
void oledDumpBuffer(SSOLED *pOLED, uint8_t *pBuffer) {
  int x, y;
  int iLines, iCols;
  uint8_t bNeedPos;
  uint8_t *pSrc = pOLED->ucScreen;
  if (pBuffer == NULL)
    pBuffer = pOLED->ucScreen;
  if (pBuffer == NULL)
    return;
  iLines = pOLED->oled_y >> 3;
  iCols = pOLED->oled_x >> 4;
  for (y = 0; y < iLines; y++) {
    bNeedPos = 1;
    for (x = 0; x < iCols; x++) {
      if (pOLED->ucScreen == NULL || pBuffer == pSrc ||
          memcmp(pSrc, pBuffer, 16) != 0) {
        if (bNeedPos) {
          bNeedPos = 0;
          oledSetPosition(pOLED, x * 16, y, 1);
        }
        oledWriteDataBlock(pOLED, pBuffer, 16, 1);
      } else {
        bNeedPos = 1;
      }
      pSrc += 16;
      pBuffer += 16;
    }
    pSrc += (128 - pOLED->oled_x);
    pBuffer += (128 - pOLED->oled_x);
  }
}
void oledFill(SSOLED *pOLED, unsigned char ucData, int bRender) {
  uint8_t x, y;
  uint8_t iLines, iCols;
  unsigned char temp[16];
  iLines = pOLED->oled_y >> 3;
  iCols = pOLED->oled_x >> 4;
  memset(temp, ucData, 16);
  pOLED->iCursorX = pOLED->iCursorY = 0;
  for (y = 0; y < iLines; y++) {
    oledSetPosition(pOLED, 0, y, bRender);
    for (x = 0; x < iCols; x++) {
      oledWriteDataBlock(pOLED, temp, 16, bRender);
    }
    if (pOLED->oled_type == OLED_72x40)
      oledWriteDataBlock(pOLED, temp, 8, bRender);
  }
  if (pOLED->ucScreen)
    memset(pOLED->ucScreen, ucData, (pOLED->oled_x * pOLED->oled_y) / 8);
}
void oledSetBackBuffer(SSOLED *pOLED, uint8_t *pBuffer) {
  pOLED->ucScreen = pBuffer;
}
void oledDrawLine(SSOLED *pOLED, int x1, int y1, int x2, int y2, int bRender) {
  int temp;
  int dx = x2 - x1;
  int dy = y2 - y1;
  int error;
  uint8_t *p, *pStart, mask, bOld, bNew;
  int xinc, yinc;
  int y, x;
  if (x1 < 0 || x2 < 0 || y1 < 0 || y2 < 0 || x1 >= pOLED->oled_x ||
      x2 >= pOLED->oled_x || y1 >= pOLED->oled_y || y2 >= pOLED->oled_y)
    return;
  if (abs(dx) > abs(dy)) {
    if (x2 < x1) {
      dx = -dx;
      temp = x1;
      x1 = x2;
      x2 = temp;
      temp = y1;
      y1 = y2;
      y2 = temp;
    }
    y = y1;
    dy = (y2 - y1);
    error = dx >> 1;
    yinc = 1;
    if (dy < 0) {
      dy = -dy;
      yinc = -1;
    }
    p = pStart = &pOLED->ucScreen[x1 + ((y >> 3) << 7)];
    mask = 1 << (y & 7);
    for (x = x1; x1 <= x2; x1++) {
      *p++ |= mask;
      error -= dy;
      if (error < 0) {
        error += dx;
        if (yinc > 0)
          mask <<= 1;
        else
          mask >>= 1;
        if (mask == 0) {
          oledSetPosition(pOLED, x, y >> 3, bRender);
          oledWriteDataBlock(pOLED, pStart, (int)(p - pStart), bRender);
          x = x1 + 1;
          y1 = y + yinc;
          p += (yinc > 0) ? 128 : -128;
          pStart = p;
          mask = 1 << (y1 & 7);
        }
        y += yinc;
      }
    }
    if (p != pStart) {
      oledSetPosition(pOLED, x, y >> 3, bRender);
      oledWriteDataBlock(pOLED, pStart, (int)(p - pStart), bRender);
    }
  } else {
    if (y1 > y2) {
      dy = -dy;
      temp = x1;
      x1 = x2;
      x2 = temp;
      temp = y1;
      y1 = y2;
      y2 = temp;
    }
    p = &pOLED->ucScreen[x1 + ((y1 >> 3) * 128)];
    bOld = bNew = p[0];
    mask = 1 << (y1 & 7);
    dx = (x2 - x1);
    error = dy >> 1;
    xinc = 1;
    if (dx < 0) {
      dx = -dx;
      xinc = -1;
    }
    for (x = x1; y1 <= y2; y1++) {
      bNew |= mask;
      error -= dx;
      mask <<= 1;
      if (mask == 0) {
        if (bOld != bNew) {
          p[0] = bNew;
          oledSetPosition(pOLED, x, y1 >> 3, bRender);
          oledWriteDataBlock(pOLED, &bNew, 1, bRender);
        }
        p += 128;
        bOld = bNew = p[0];
        mask = 1;
      }
      if (error < 0) {
        error += dy;
        if (bOld != bNew) {
          p[0] = bNew;
          oledSetPosition(pOLED, x, y1 >> 3, bRender);
          oledWriteDataBlock(pOLED, &bNew, 1, bRender);
        }
        p += xinc;
        x += xinc;
        bOld = bNew = p[0];
      }
    }
    if (bOld != bNew) {
      p[0] = bNew;
      oledSetPosition(pOLED, x, y2 >> 3, bRender);
      oledWriteDataBlock(pOLED, &bNew, 1, bRender);
    }
  }
}
int oledScaledString(SSOLED *pOLED, int x, int y, char *szMsg, int iSize,
                     int bInvert, int iXScale, int iYScale, int iRotation) {
  uint32_t row, col, dx, dy;
  uint32_t sx, sy;
  uint8_t c, uc, color, *d;
  const uint8_t *s;
  uint8_t ucTemp[16];
  int tx, ty, bit, iFontOff;
  int iPitch, iOffset;
  int iFontWidth;
  if (iXScale == 0 || iYScale == 0 || szMsg == NULL || pOLED == NULL ||
      pOLED->ucScreen == NULL || x < 0 || y < 0 || x >= pOLED->oled_x - 1 ||
      y >= pOLED->oled_y - 1)
    return -1;
  if (iSize != FONT_8x8 && iSize != FONT_6x8)
    return -1;
  iFontWidth = (iSize == FONT_6x8) ? 6 : 8;
  s = (iSize == FONT_6x8) ? ucSmallFont : ucFont;
  iPitch = pOLED->oled_x;
  dx = (iFontWidth * iXScale) >> 8;
  dy = (8 * iYScale) >> 8;
  sx = 65536 / iXScale;
  sy = 65536 / iYScale;
  while (*szMsg) {
    c = *szMsg++;
    iFontOff = (int)(c - 32) * (iFontWidth - 1);
    ucTemp[0] = 0;
    memcpy_P(&ucTemp[1], &s[iFontOff], iFontWidth - 1);
    if (bInvert)
      InvertBytes(ucTemp, iFontWidth);
    col = 0;
    for (tx = 0; tx < (int)dx; tx++) {
      row = 0;
      uc = ucTemp[col >> 8];
      for (ty = 0; ty < (int)dy; ty++) {
        int nx, ny;
        bit = row >> 8;
        color = (uc & (1 << bit));
        switch (iRotation) {
        case ROT_0:
          nx = x + tx;
          ny = y + ty;
          break;
        case ROT_90:
          nx = x - ty;
          ny = y + tx;
          break;
        case ROT_180:
          nx = x - tx;
          ny = y - ty;
          break;
        case ROT_270:
          nx = x + ty;
          ny = y - tx;
          break;
        }
        if (nx >= 0 && ny >= 0 && nx < pOLED->oled_x && ny < pOLED->oled_y) {
          d = &pOLED->ucScreen[(ny >> 3) * iPitch + nx];
          if (color)
            d[0] |= (1 << (ny & 7));
          else
            d[0] &= ~(1 << (ny & 7));
        }
        row += sy;
      }
      col += sx;
    }
    switch (iRotation) {
    case ROT_0:
      x += dx;
      break;
    case ROT_90:
      y += dx;
      break;
    case ROT_180:
      x -= dx;
      break;
    case ROT_270:
      y -= dx;
      break;
    }
  }
  return 0;
}
static void DrawScaledPixel(SSOLED *pOLED, int iCX, int iCY, int x, int y,
                            int32_t iXFrac, int32_t iYFrac, uint8_t ucColor) {
  uint8_t *d, ucMask;
  if (iXFrac != 0x10000)
    x = ((x * iXFrac) >> 16);
  if (iYFrac != 0x10000)
    y = ((y * iYFrac) >> 16);
  x += iCX;
  y += iCY;
  if (x < 0 || x >= pOLED->oled_x || y < 0 || y >= pOLED->oled_y)
    return;
  d = &pOLED->ucScreen[((y >> 3) * 128) + x];
  ucMask = 1 << (y & 7);
  if (ucColor)
    *d |= ucMask;
  else
    *d &= ~ucMask;
}
static void DrawScaledLine(SSOLED *pOLED, int iCX, int iCY, int x, int y,
                           int32_t iXFrac, int32_t iYFrac, uint8_t ucColor) {
  int iLen, x2;
  uint8_t *d, ucMask;
  if (iXFrac != 0x10000)
    x = ((x * iXFrac) >> 16);
  if (iYFrac != 0x10000)
    y = ((y * iYFrac) >> 16);
  iLen = x * 2;
  x = iCX - x;
  y += iCY;
  x2 = x + iLen;
  if (y < 0 || y >= pOLED->oled_y)
    return;
  if (x < 0)
    x = 0;
  if (x2 >= pOLED->oled_x)
    x2 = pOLED->oled_x - 1;
  iLen = x2 - x + 1;
  d = &pOLED->ucScreen[((y >> 3) * 128) + x];
  ucMask = 1 << (y & 7);
  if (ucColor) {
    for (; iLen > 0; iLen--)
      *d++ |= ucMask;
  } else {
    for (; iLen > 0; iLen--)
      *d++ &= ~ucMask;
  }
}
static void BresenhamCircle(SSOLED *pOLED, int iCX, int iCY, int x, int y,
                            int32_t iXFrac, int32_t iYFrac, uint8_t ucColor,
                            uint8_t bFill) {
  if (bFill) {
    DrawScaledLine(pOLED, iCX, iCY, x, y, iXFrac, iYFrac, ucColor);
    DrawScaledLine(pOLED, iCX, iCY, x, -y, iXFrac, iYFrac, ucColor);
    DrawScaledLine(pOLED, iCX, iCY, y, x, iXFrac, iYFrac, ucColor);
    DrawScaledLine(pOLED, iCX, iCY, y, -x, iXFrac, iYFrac, ucColor);
  } else {
    DrawScaledPixel(pOLED, iCX, iCY, x, y, iXFrac, iYFrac, ucColor);
    DrawScaledPixel(pOLED, iCX, iCY, -x, y, iXFrac, iYFrac, ucColor);
    DrawScaledPixel(pOLED, iCX, iCY, x, -y, iXFrac, iYFrac, ucColor);
    DrawScaledPixel(pOLED, iCX, iCY, -x, -y, iXFrac, iYFrac, ucColor);
    DrawScaledPixel(pOLED, iCX, iCY, y, x, iXFrac, iYFrac, ucColor);
    DrawScaledPixel(pOLED, iCX, iCY, -y, x, iXFrac, iYFrac, ucColor);
    DrawScaledPixel(pOLED, iCX, iCY, y, -x, iXFrac, iYFrac, ucColor);
    DrawScaledPixel(pOLED, iCX, iCY, -y, -x, iXFrac, iYFrac, ucColor);
  }
}
void oledEllipse(SSOLED *pOLED, int iCenterX, int iCenterY, int32_t iRadiusX,
                 int32_t iRadiusY, uint8_t ucColor, uint8_t bFilled) {
  int32_t iXFrac, iYFrac;
  int iRadius, iDelta, x, y;
  if (pOLED == NULL || pOLED->ucScreen == NULL)
    return;
  if (iRadiusX <= 0 || iRadiusY <= 0)
    return;
  if (iRadiusX > iRadiusY) {
    iRadius = iRadiusX;
    iXFrac = 65536;
    iYFrac = (iRadiusY * 65536) / iRadiusX;
  } else {
    iRadius = iRadiusY;
    iXFrac = (iRadiusX * 65536) / iRadiusY;
    iYFrac = 65536;
  }
  iDelta = 3 - (2 * iRadius);
  x = 0;
  y = iRadius;
  while (x <= y) {
    BresenhamCircle(pOLED, iCenterX, iCenterY, x, y, iXFrac, iYFrac, ucColor,
                    bFilled);
    x++;
    if (iDelta < 0) {
      iDelta += (4 * x) + 6;
    } else {
      iDelta += 4 * (x - y) + 10;
      y--;
    }
  }
}
void oledRectangle(SSOLED *pOLED, int x1, int y1, int x2, int y2,
                   uint8_t ucColor, uint8_t bFilled) {
  uint8_t *d, ucMask, ucMask2;
  int tmp, iOff;
  if (pOLED == NULL || pOLED->ucScreen == NULL)
    return;
  if (x1 < 0 || y1 < 0 || x2 < 0 || y2 < 0 || x1 >= pOLED->oled_x ||
      y1 >= pOLED->oled_y || x2 >= pOLED->oled_x || y2 >= pOLED->oled_y)
    return;
  if (x2 < x1) {
    tmp = x1;
    x1 = x2;
    x2 = tmp;
  }
  if (y2 < y1) {
    tmp = y1;
    y1 = y2;
    y2 = tmp;
  }
  if (bFilled) {
    int x, y, iMiddle;
    iMiddle = (y2 >> 3) - (y1 >> 3);
    ucMask = 0xff << (y1 & 7);
    if (iMiddle == 0)
      ucMask &= (0xff >> (7 - (y2 & 7)));
    d = &pOLED->ucScreen[(y1 >> 3) * 128 + x1];
    for (x = x1; x <= x2; x++) {
      if (ucColor)
        *d |= ucMask;
      else
        *d &= ~ucMask;
      d++;
    }
    if (iMiddle > 1) {
      ucMask = (ucColor) ? 0xff : 0x00;
      for (y = 1; y < iMiddle; y++) {
        d = &pOLED->ucScreen[(y1 >> 3) * 128 + x1 + (y * 128)];
        for (x = x1; x <= x2; x++)
          *d++ = ucMask;
      }
    }
    if (iMiddle >= 1) {
      ucMask = 0xff >> (7 - (y2 & 7));
      d = &pOLED->ucScreen[(y2 >> 3) * 128 + x1];
      for (x = x1; x <= x2; x++) {
        if (ucColor)
          *d++ |= ucMask;
        else
          *d++ &= ~ucMask;
      }
    }
  } else {
    d = &pOLED->ucScreen[(y1 >> 3) * 128 + x1];
    if ((y1 >> 3) == (y2 >> 3)) {
      ucMask2 = 0xff << (y1 & 7);
      ucMask = 1 << (y1 & 7);
      ucMask |= 1 << (y2 & 7);
      ucMask2 &= (0xff >> (7 - (y2 & 7)));
      if (ucColor) {
        *d++ |= ucMask2;
        x1++;
        for (; x1 < x2; x1++)
          *d++ |= ucMask;
        if (x1 <= x2)
          *d++ |= ucMask2;
      } else {
        *d++ &= ~ucMask2;
        x1++;
        for (; x1 < x2; x1++)
          *d++ &= ~ucMask;
        if (x1 <= x2)
          *d++ &= ~ucMask2;
      }
    } else {
      int y;
      iOff = (x2 - x1);
      ucMask = 1 << (y1 & 7);
      for (y = y1; y <= y2; y++) {
        if (ucColor) {
          *d |= ucMask;
          d[iOff] |= ucMask;
        } else {
          *d &= ~ucMask;
          d[iOff] &= ~ucMask;
        }
        ucMask <<= 1;
        if (ucMask == 0) {
          ucMask = 1;
          d += 128;
        }
      }
      ucMask = 1 << (y1 & 7);
      ucMask2 = 1 << (y2 & 7);
      x1++;
      d = &pOLED->ucScreen[(y1 >> 3) * 128 + x1];
      iOff = (y2 >> 3) - (y1 >> 3);
      iOff *= 128;
      for (; x1 < x2; x1++) {
        if (ucColor) {
          *d |= ucMask;
          d[iOff] |= ucMask2;
        } else {
          *d &= ~ucMask;
          d[iOff] &= ~ucMask2;
        }
        d++;
      }
    }
  }
}
